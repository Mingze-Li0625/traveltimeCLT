knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(traveltimeHMM)
data(tripset)
head(tripset)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(traveltimeCLT)
data(trips)
head(trips)
library(knitr)
library(kableExtra)
install.packages(kableExtra)
install.packages("kableExtra")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(traveltimeCLT)
data(trips)
head(trips)
library(knitr)
library(kableExtra)
install.packages("kableExtra")
install.packages("gdtools")
install.packages("kableExtra")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(traveltimeCLT)
data(trips)
head(trips)
library(knitr)
library(kableExtra)
y <- c("Mon - Fri outside rush hour", "Mon - Fri, 7AM - 9AM", "Mon - Fri, 3PM - 6PM", "Sat 9AM - 9PM + Sun 9AM - 7PM", "Sat - Sun otherwise")
x <- c("Weekday", "MorningRush", "EveningRush", "Weekendday", "EveningNight")
z <- data.frame(cbind(y, x))
names(z) <- c("Period of the week", "Time bin")
knitr::kable(z, caption = "Table 1 - Example from `tripset` : Time bin by period of the week", escape = FALSE, align = 'll', booktabs = TRUE) %>%
kable_styling(full_width = TRUE)
library(knitr)
library(kableExtra)
x1 <- c("trip-HMM", "HMM (default)", "trip", "no-dependence")
x2 <- c("YES", "YES", "NO", "NO")
x3 <- c("YES", "NO", "YES", "NO")
z <- data.frame(cbind(x1, x2, x3))
names(z) <- c("Model type", "Hidden Markov model (`HMM`)", "Trip effect model (`trip`)")
knitr::kable(z, caption = "Model typology", escape = FALSE, align = 'lcc', booktabs=TRUE) %>%
kable_styling(full_width = F) %>%
column_spec(1, width = "4cm") %>%
column_spec(2:3, width = "3cm")
library(knitr)
library(kableExtra)
r <-       c("`logspeeds`", "A numeric vector of speed observations (in km/h) on the (natural) log-scale.  Needs to be provided if and only if `tripframe` is NULL.  Default is NULL.")
r <- rbind(r,
c("`trips`", "An integer or character vector of trip ids for each observation of `speed`.  Needs to be provided if and only if `tripframe` is NULL.  Default is NULL."))
r <- rbind(r,
c("`timeBins`", "A character vector of time bins for each observation of `speed`.  Needs to be provided if and only if `tripframe` is NULL.  Default is NULL."))
r <- rbind(r,
c("`linkIds`", "A vector of link ids (route or way) for each observation of `speed`.  Needs to be provided if and only if `tripframe` is NULL.  Default is NULL."))
r <- rbind(r,
c("`data`", "A data frame or equivalent object that contains one column for each of test.  Default is NULL.  Mutually exclusive with the full joint set of `logspeeds`, `trips`, `timeBins` and `linkIds`."))
r <- rbind(r,
c("`nQ`", "An integer corresponding to the number of different congestion states that the traversal of a given link can take corresponding to `{1, ..., Q}`.    Models of the HMM family require `nQ >= 2` whilst other models require exactly `nQ=1`.  Default is `1`."))
r <- rbind(r,
c("`model`", "Type of model as string.  Can take one of '`trip-HMM`', '`HMM`', '`trip`' or '`no-dependence`'.  Default is '`HMM`'.  See Table 3 for details."))
r <- rbind(r,
c("`tol.err`", "A numeric variable representing the threshold under which the estimation algorithm will consider it has reached acceptable estimate values.  Default is $10$."))
r <- rbind(r,
c("`L`", "An integer minimum number of observations per factor (`linkIds` x `timeBins`) to estimate the parameter for.  Default is $10$.  See section on imputation below."))
r <- rbind(r,
c("`max.it`", "An integer for the upper limit of the iterations to be performed by the estimation algorithm.  Default is 20."))
r <- rbind(r,
c("`verbose`", "A boolean that triggers verbose output.  Default is `FALSE`."))
r <- rbind(r,
c("`max.speed`", "An optional float for the maximum speed in km/h, on the linear scale (not the log-scale, unlike for `logspeeds`).  Default is `NULL` which in practice results in a maximum speed of 130 km/h. "))
r <- rbind(r,
c("`seed`", "An optional float for the seed used for the random generation of the first Markov transition matrix and initial state vector.  Default is `NULL`. If not provided, then those objects are generated deterministically. The effect of `seed` is cancelled by tmat.p or init.p when provided."))
r <- rbind(r,
c("`tmat.p`", "An optional Markov transition matrix $\\Gamma$ of size `nQ` \\times `nQ` with rows summing to $1$.  Default is `NULL`.  See section on Markov transition matrix and initial state vector below."))
r <- rbind(r,
c("`init.p`", "An optional Markov initial state vector $\\gamma$ of size `nQ` with elements summing to $1$.  Default is `NULL`.    See section on Markov transition matrix and initial state vector below."))
r <- rbind(r,
c("`debug`", "A boolean with value `TRUE` if we want debug information to be generated.  Default is `FALSE`."))
z <- as.data.frame(r[,2], row.names = r[,1])
names(z) <- ""
knitr::kable(z, caption = "Table 3 - Parameters for `traveltimeHMM`", escape = FALSE)
library(knitr)
library(kableExtra)
r <-       c("`factors`", "A factor of interactions (`linkIds` x `timeBins`) of length `nObs`.  Factors are in the format 'linkId.timeBin'.")
r <- rbind(r,
c("`trip`", "A factor of trip IDs."))
r <- rbind(r,
c("`tmat`", "A transition matrix with rows corresponding to `levels(factors)`, and with columns being the row-wise transition matrix of that factor. For example, `matrix(tmat[1,], ncol = nQ, nrow = nQ, byrow = TRUE)` is the transition matrix $\\hat{\\Gamma}$ of `levels(factors)[1]`.  NULL if hidden Markov modelling is not handled by the selected model type."))
r <- rbind(r,
c("`init`", "An initial state probability matrix with rows corresponding to `levels(factors)`, and columns to the `nQ` states.  For example, `init[1,]` gives $\\hat{\\gamma}^\\top$ for `levels(factors)[1]`.  NULL if hidden Markov modelling is not handled by the selected model type."))
r <- rbind(r,
c("`sd`", "A matrix of standard deviations estimates for the  natural logarithm of the speed (in km/h), with rows corresponding to `levels(factors)`, and columns to standard deviation estimates $\\hat{\\sigma}$ for the `nQ` states."))
r <- rbind(r,
c("`mean`", "A matrix of mean estimates for the  natural logarithm of the speed (in km/h), with rows corresponding to `levels(factors)`, and columns to mean estimates $\\hat{\\sigma}$ for the `nQ` states.  Speed"))
r <- rbind(r,
c("`tau`", "A numeric variable for the standard deviation estimate $\\hat{\\tau}$ for the trip effect $\\log(E)$.  Equals $1$ if trip effect is not handled by the selected model type."))
r <- rbind(r,
c("`logE`", "A numeric vector of trip effect estimates $\\log(\\hat{E})$ corresponding to `levels(trip)`.  Values are set to $0$ if trip effect is not handled by the selected model type.  Units are the same as for `logspeeds`."))
r <- rbind(r,
c("`nQ`", "An integer corresponding to the number of different congestion states, equal to the parameter `nQ` that was passed in the function call."))
r <- rbind(r,
c("`nB`", "An integer corresponding to the number of unique time bins."))
r <- rbind(r,
c("`nObs`", "An integer corresponding to the number of observations."))
r <- rbind(r,
c("`model`", "Type of model as string.  Same as parameter `model` that was passed in the function call."))
z <- as.data.frame(r[,2], row.names = r[,1])
names(z) <- ""
knitr::kable(z, caption = "Table 4 - Components of the list object returned by `traveltimeHMM`", escape = FALSE)
library(knitr)
library(kableExtra)
r <-       c("`object`", "A list object corresponding to the return value of function `traveltimeHMM`.")
r <- rbind(r,
c("`tripdata`", "A data frame of road links with information on each link's traversal. Columns minimally includes objects `linkID` and `length`, and the latter must have the same length. Rows must be in chronological order."))
r <- rbind(r,
c("`starttime`", "The start date and time for the very first link of the trip, in `POSIXct` format. Default is the current date and time."))
r <- rbind(r,
c("`n`", "Number of samples. Default is $1000$."))
r <- rbind(r,
c("`logE`", "A numeric representing the point estimate of the mean trip effect for the speed in km/h, on the log-scale.  (Hence, speeds and trip effects are to be added *on the logarithmic scale* as prescribed in Woodard et al.)  `logE` normally needs to be a numerical vector of size `nSamples`. If a single numeric value is supplied, it will be replicated into a vector. If `logE` is `NULL` the function will use either a vector of simulated values (if the model is from the trip family), or a vector of $0$ otherwise. Default is NULL. NOTE: when simulating values for the vector, the value for $\\tau$ is taken from the model object."))
z <- as.data.frame(r[,2], row.names = r[,1])
names(z) <- ""
knitr::kable(z, caption = "Table 5 - Parameters for `predict.traveltime`", escape = FALSE)
pred = readRDS('predHMM.rds')
browseVignettes("traveltimeCLT")
